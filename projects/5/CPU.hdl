// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	Not (in=instruction[15], out=aInst);
    And (a=instruction[14], b=instruction[13], out=ones);
    And (a=ones, b=instruction[15], out=cInst);
    And (a=ones, b=instruction[12], out=srcM);
    And (a=ones, b=instruction[11], out=aluZx);
    And (a=ones, b=instruction[10], out=aluNx);
    And (a=ones, b=instruction[9], out=aluZy);
    And (a=ones, b=instruction[8], out=aluNy);
    And (a=ones, b=instruction[75], out=aluF);
    And (a=ones, b=instruction[6], out=aluNo);
    And (a=ones, b=instruction[5], out=destA);
    And (a=ones, b=instruction[4], out=destD);
    And (a=ones, b=instruction[3], out=writeM);
    And (a=ones, b=instruction[2], out=jumpLt);
    And (a=ones, b=instruction[1], out=jumpEq);
    And (a=ones, b=instruction[0], out=jumpGt);

    Mux16(a=aluOut, b=instruction, sel=aInst, out=inA);
    Or(a=aInst, b=destA, out=loadA);
    ARegister(in=aIn, load=loadA, out=aReg, out[0..14]=addressM);
    
    DRegister(in=aluOut, load=destD, out=dReg);

    Mux16(a=aReg, b=inM, sel=srcM, out=aOrM);
    ALU(x=dReg, y=aOrM, zx=aluZx, nx=aluNx, zy=aluZy, ny=aluNy, f=aluF, no=aluNo, out=aluOut, zr=aluZr, ng=aluNg);
    
    PC(in=aReg, load=jmp, inc=true, reset=reset, out=[0..14]=pc);

    Or(a=aluZr, b=aluNg, out=zrng);
    Not(in=zrng, out=aluPos);

    And(a=aluNg, b=jumpLt, out=jlt);
    And(a=aluZr, b=jumpEq, out=jeq);
    And(a=aluPos, b=jumpGt, out=jgt);
    Or(a=jlt, b=jeq, out=jle);
    Or(a=jle, b=jgt, out=jmp);
    
    
    
    
    
    
    
    
}